#!/bin/bash

# Dependencies:
# - imagemagick
# - xclip

# Default image format
DEFAULT_FORMAT="png"

# Default sub-directory of images folder
DIRECTORY_NAME="shot"

# Size of image view in percentage of screen
VIEW_SIZE=60

# Image formats
FORMATS=(png jpg gif bmp tif)

# Default command line argument values
source="fullscreen"
destination="file"
view_image=false
delay=0

show_help() {

    echo "Usage: screenshot [OPTIONS] [PATH]"
    echo
    echo "Content:"
    echo "  -f, --fullscreen     Grab full screen (default)"
    echo "  -w, --window         Grab active window"
    echo "  -s, --selection      Grab a selection"
    echo
    echo "Options:"
    echo "  -c, --clipboard      Send screenshot to clipboard"
    echo "  -d, --delay SECONDS  Delay before screenshot"
    echo "  -v, --view           View Screenshot"
    echo "  -h, --help           Show this message"
    echo

    exit 0

}

base_directory() {

    if [ -n "$XDG_CONFIG_HOME" ]; then
        config_dir=$XDG_CONFIG_HOME
    else
        config_dir="$HOME/.config"
    fi

    user_dirs_path="$config_dir/user-dirs.dirs"

    if [ -f "$user_dirs_path" ]; then

        dir="$(eval echo $(cat $user_dirs_path | grep XDG_PICTURES_DIR | cut -d '=' -f2 | tr -d \"))"

        if [ -d "$dir" ]; then
            base_dir=$dir
        fi

    fi

    if [ -z "$base_dir" ]; then

        dirs=(Pictures pictures Images images)

        for dir in ${dirs[@]}; do
            if [ -d "$HOME/$dir" ]; then
                base_dir="$HOME/$dir"
                break
            fi
        done

    fi

    if [ -z "$base_dir" ]; then
        base_dir=$HOME
    fi

    echo $base_dir

}

for arg in $@; do
    case "$1" in
        '-h'|'--help')
            show_help
            shift 1
            ;;
        '-s'|'--selection')
            source="selection"
            shift 1
            ;;
        '-w'|'--window')
            source="window"
            shift 1
            ;;
        '-f'|'--fullscreen')
            source="fullscreen"
            shift 1
            ;;
        '-c'|'--clipboard')
            destination="clipboard"
            shift 1
            ;;
        '-v'|'--view')
            view_image=true
            shift 1
            ;;
        '-d'|'--delay')
            delay=$2
            shift 2
            ;;
    esac
done

# Get format and path
if [ -z "$path" ]; then

    if [ "$destination" == "clipboard" ]; then

        if [ -n "$XDG_CACHE_HOME" ]; then
            directory=$XDG_CACHE_HOME
        else
            directory="$HOME/.cache"
        fi

        filename="screenshot.$DEFAULT_FORMAT"
        path="$directory/$filename"

    else

        filename="$(date "+%Y-%m-%d_%H:%M:%S").$DEFAULT_FORMAT"
        path="$(base_directory)/$DIRECTORY_NAME/$filename"

        # If path already exists then add milliseconds to filename
        if [ -f "$path" ]; then
            filename="$(date "+%Y-%m-%d_%H:%M:%S.%N").$DEFAULT_FORMAT"
            path="$(base_directory)/$DIRECTORY_NAME/$filename"
        fi

    fi

fi

# Validate image format
format=$(echo $path | awk -F '.' '{print $NF}')

if ! [[ " ${FORMATS[@]} " =~ " ${format} " ]]; then
    echo "Format $format invalid."
    exit 1
fi

# Validate destination directory exists
directory=$(dirname "$path")

if ! [ -d "$directory" ]; then

    parent_directory=$(dirname "$directory")

    if [ -d "$parent_directory" ]; then
        mkdir "$directory"
    else
        echo "Directory $directory does not exist."
        exit 1
    fi

fi

# Delay if value is greater than zero
if [ $delay -gt 0 ]; then
    sleep $delay
fi

# Take screenshot
if [ "$source" == "selection" ]; then
    import "$path"
elif [ "$source" == "window" ]; then
    import -window \"$(xdotool getwindowfocus)\" "$path"
elif [ "$source" == "fullscreen" ]; then
    import -window root "$path"
fi

# Put screenshot image in clipboard
if [ $destination == "clipboard" ]; then
    xclip -selection clipboard -t image/png -i "$path"
fi

# Display screenshot preview
if [ $view_image == true ]; then
    display -resize $VIEW_SIZE% "$path"
fi

# Remove unwanted image file
if [ $destination == "clipboard" ]; then
    rm "$path"
fi
